name: {{FRAMEWORK_NAME}}
scheduler:
  principal: {{FRAMEWORK_PRINCIPAL}}
  user: {{FRAMEWORK_USER}}
pods:
  kafka:
    count: {{BROKER_COUNT}}
    placement: '{{{PLACEMENT_CONSTRAINTS}}}'
    uris:
      - {{KAFKA_URI}}
      - {{KAFKA_JAVA_URI}}
      - {{BOOTSTRAP_URI}}
      - {{LIBMESOS_URI}}
      - {{KAFKA_STATSD_URI}}
      - {{CLIENT_STATSD_URI}}
      - {{SETUP_HELPER_URI}}
      - {{ZOOKEEPER_CLIENT_URI}}
      - {{CUSTOM_KAFKA_PRINCIPAL_URI}}
    rlimits:
      RLIMIT_NOFILE:
        soft: {{RLIMIT_NOFILE_SOFT}}
        hard: {{RLIMIT_NOFILE_HARD}}
    {{#ENABLE_VIRTUAL_NETWORK}}
    networks:
      {{VIRTUAL_NETWORK_NAME}}:
        labels: {{VIRTUAL_NETWORK_PLUGIN_LABELS}}
    {{/ENABLE_VIRTUAL_NETWORK}}
    {{#TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
    secrets:
      keytab:
        secret: {{SECURITY_KERBEROS_KEYTAB_SECRET}}
        file: kafka.keytab
      {{#TASKCFG_ALL_SECURE_JMX_ENABLED}}
      jmxPasswordFile:
        secret: {{SECURE_JMX_PWD_FILE}}
        file: jmx/key_file
      jmxAccessFile:
        secret: {{SECURE_JMX_ACCESS_FILE}}
        file: jmx/access_file
      {{#SECURE_JMX_TRUST_STORE_ENABLED}}
      jmxTrustStore:
        secret: {{SECURE_JMX_TRUST_STORE}}
        file: jmx/trust_store
      jmxTrustStorePass:
        secret: {{SECURE_JMX_TRUST_STORE_PASSWORD}}
        file: jmx/trust_store_pass
      {{/SECURE_JMX_TRUST_STORE_ENABLED}}
      jmxKeyStore:
        secret: {{SECURE_JMX_KEY_STORE}}
        file: jmx/key_store
      jmxKeyStorePass:
        secret: {{SECURE_JMX_KEY_STORE_PASSWORD}}
        file: jmx/key_store_pass
      {{/TASKCFG_ALL_SECURE_JMX_ENABLED}}
    {{/TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
    {{#TASKCFG_ALL_SECURE_JMX_ENABLED}}
    {{^TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
    secrets:
      jmxPasswordFile:
        secret: {{SECURE_JMX_PWD_FILE}}
        file: jmx/key_file
      jmxAccessFile:
        secret: {{SECURE_JMX_ACCESS_FILE}}
        file: jmx/access_file
      {{#SECURE_JMX_TRUST_STORE_ENABLED}}
      jmxTrustStore:
        secret: {{SECURE_JMX_TRUST_STORE}}
        file: jmx/trust_store
      jmxTrustStorePass:
        secret: {{SECURE_JMX_TRUST_STORE_PASSWORD}}
        file: jmx/trust_store_pass
      {{/SECURE_JMX_TRUST_STORE_ENABLED}}
      jmxKeyStore:
        secret: {{SECURE_JMX_KEY_STORE}}
        file: jmx/key_store
      jmxKeyStorePass:
        secret: {{SECURE_JMX_KEY_STORE_PASSWORD}}
        file: jmx/key_store_pass
    {{/TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
    {{/TASKCFG_ALL_SECURE_JMX_ENABLED}}
    tasks:
      broker:
        cpus: {{BROKER_CPUS}}
        memory: {{BROKER_MEM}}
        ports:
          {{^TASKCFG_ALL_SECURITY_TRANSPORT_ENCRYPTION_ENABLED}}
          broker:
            port: {{BROKER_PORT}}
            env-key: KAFKA_BROKER_PORT
            advertise: true
            {{^TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
            vip:
              prefix: broker
              port: 9092
            {{/TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
          {{/TASKCFG_ALL_SECURITY_TRANSPORT_ENCRYPTION_ENABLED}}
          {{#TASKCFG_ALL_SECURITY_TRANSPORT_ENCRYPTION_ENABLED}}
          {{#TASKCFG_ALL_SECURITY_TRANSPORT_ENCRYPTION_ALLOW_PLAINTEXT}}
          broker:
            port: {{BROKER_PORT}}
            env-key: KAFKA_BROKER_PORT
            advertise: true
            {{^TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
            vip:
              prefix: broker
              port: 9092
            {{/TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
          {{/TASKCFG_ALL_SECURITY_TRANSPORT_ENCRYPTION_ALLOW_PLAINTEXT}}
          broker-tls:
            port: {{BROKER_PORT_TLS}}
            env-key: KAFKA_BROKER_PORT_TLS
            advertise: true
            {{^TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
            vip:
              prefix: broker-tls
              port: 9093
            {{/TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
          {{/TASKCFG_ALL_SECURITY_TRANSPORT_ENCRYPTION_ENABLED}}
          {{#TASKCFG_ALL_SECURE_JMX_ENABLED}}
          jmx-port:
            port: {{SECURE_JMX_PORT}}
          rmi-port:
            port: {{SECURE_JMX_RMI_PORT}}
          {{/TASKCFG_ALL_SECURE_JMX_ENABLED}}
        volume:
          path: {{BROKER_DISK_PATH}}
          type: {{BROKER_DISK_TYPE}}
          size: {{BROKER_DISK_SIZE}}
        env:
          KAFKA_DISK_PATH: "{{BROKER_DISK_PATH}}"
          KAFKA_HEAP_OPTS: "-Xms{{BROKER_JAVA_HEAP}}M -Xmx{{BROKER_JAVA_HEAP}}M"
        goal: RUNNING
        cmd: |
          # Exit on any error.
          set -e

          export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jdk*/jre/)
      {{#TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
          export KAFKA_OPTS="-Djava.security.auth.login.config=$MESOS_SANDBOX/{{KAFKA_VERSION_PATH}}/config/kafka_server_jaas.conf -Djava.security.krb5.conf=$MESOS_SANDBOX/{{KAFKA_VERSION_PATH}}/config/krb5.conf $KAFKA_OPTS"
        {{#TASKCFG_ALL_SECURITY_KERBEROS_DEBUG}}
          export KAFKA_OPTS="-Dsun.security.krb5.debug=true $KAFKA_OPTS"
        {{/TASKCFG_ALL_SECURITY_KERBEROS_DEBUG}}
      {{/TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
      {{#TASKCFG_ALL_SECURE_JMX_ENABLED}}
          export SECURE_JMX_KEY_STORE_KEY=`cat $MESOS_SANDBOX/jmx/key_store_pass`
          export KEY_STORE_PATH=$MESOS_SANDBOX/jmx/key_store
          if [ -f "$MESOS_SANDBOX/jmx/trust_store" ]; then
              # load user provided trust store
              export TRUST_STORE_PATH=$MESOS_SANDBOX/jmx/trust_store
              export SECURE_JMX_TRUST_STORE_KEY=`cat $MESOS_SANDBOX/jmx/trust_store_pass`
          else
              # load user provided keystore certs to default truststore
              export TRUST_STORE_PATH=$JAVA_HOME/lib/security/cacerts
              export SECURE_JMX_TRUST_STORE_KEY="changeit"
              self_signed_aliases=$(${JAVA_HOME}/bin/keytool -list -v -keystore $KEY_STORE_PATH -storepass $SECURE_JMX_KEY_STORE_KEY | grep 'Alias name:' | awk '{print $3}')
              for cert_alias in $self_signed_aliases ; do
                  ${JAVA_HOME}/bin/keytool -importkeystore -srckeystore $KEY_STORE_PATH -destkeystore $TRUST_STORE_PATH -srcstorepass $SECURE_JMX_KEY_STORE_KEY -deststorepass $SECURE_JMX_TRUST_STORE_KEY -srcalias $cert_alias -destalias $cert_alias ;
              done
          fi

          export JMX_PORT={{SECURE_JMX_PORT}}
          export SECURE_JMX_RMI_PORT={{SECURE_JMX_RMI_PORT}}
          export KAFKA_JMX_OPTS_SECRET="$KAFKA_JMX_OPTS_SECRET -Dcom.sun.management.config.file=$MESOS_SANDBOX/.ssl/jmx.properties"
          export KAFKA_JMX_OPTS_SECRET="$KAFKA_JMX_OPTS_SECRET -Djava.rmi.server.hostname=$MESOS_CONTAINER_IP"

          if [ ! -f "$MESOS_SANDBOX/jmx/key_file" ] ; then
              echo "Secure JMX is enabled but no JMX pwd file was provided. Exiting."
              exit 1
          fi
          if [ ! -f "$MESOS_SANDBOX/jmx/access_file" ] ; then
              echo "Secure JMX is enabled but no JMX access file was provided. Exiting."
              exit 1
          fi
          cp $MESOS_SANDBOX/jmx/key_file $MESOS_SANDBOX/.ssl/key_file
          chmod 600 $MESOS_SANDBOX/.ssl/key_file
      {{/TASKCFG_ALL_SECURE_JMX_ENABLED}}

          # setup-helper determines the correct listeners and security.inter.broker.protocol.
          # it relies on the task IP being stored in MESOS_CONTAINER_IP
          export MESOS_CONTAINER_IP=$( ./bootstrap --get-task-ip )
          ./setup-helper
          export SETUP_HELPER_ADVERTISED_LISTENERS=`cat advertised.listeners`
          export SETUP_HELPER_LISTENERS=`cat listeners`
          export SETUP_HELPER_SECURITY_INTER_BROKER_PROTOCOL=`cat security.inter.broker.protocol`
          export SETUP_HELPER_SUPER_USERS=`cat super.users`

          ./bootstrap -resolve=false

          # NOTE: We add some custom statsd libraries for statsd metrics as well
          # as a custom zookeeper library to support our own ZK running
          # kerberized. The custom zk library does not do DNS reverse resolution
          # of the ZK hostnames.
          #
          # Additionally, we include a custom principal builder
          mv -v *statsd*.jar $MESOS_SANDBOX/{{KAFKA_VERSION_PATH}}/libs/
          # Clean up any pre-existing zookeeper library
          rm $MESOS_SANDBOX/{{KAFKA_VERSION_PATH}}/libs/zookeeper*.jar
          mv -v zookeeper*.jar $MESOS_SANDBOX/{{KAFKA_VERSION_PATH}}/libs/
          mv -v kafka-custom-principal-builder* $MESOS_SANDBOX/{{KAFKA_VERSION_PATH}}/libs/
        {{#TASKCFG_ALL_SECURE_JMX_ENABLED}}
          chmod +x $MESOS_SANDBOX/.ssl/jmx-ssl-properties.sh
          $MESOS_SANDBOX/.ssl/jmx-ssl-properties.sh
          export KAFKA_JMX_OPTS=$KAFKA_JMX_OPTS_SECRET
        {{/TASKCFG_ALL_SECURE_JMX_ENABLED}}
          # Start kafka.
          exec $MESOS_SANDBOX/{{KAFKA_VERSION_PATH}}/bin/kafka-server-start.sh \
               $MESOS_SANDBOX/{{KAFKA_VERSION_PATH}}/config/server.properties
        configs:
        {{#TASKCFG_ALL_SECURE_JMX_ENABLED}}
          jmx-config:
            template: jmx-ssl-properties.sh
            dest: .ssl/jmx-ssl-properties.sh
        {{/TASKCFG_ALL_SECURE_JMX_ENABLED}}
          server-properties:
            template: server.properties.mustache
            dest: {{KAFKA_VERSION_PATH}}/config/server.properties
        {{#TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
          kafka-server-jaas:
            template: kafka_server_jaas.conf.mustache
            dest: {{KAFKA_VERSION_PATH}}/config/kafka_server_jaas.conf
          krb5-conf:
            template: krb5.conf.mustache
            dest: {{KAFKA_VERSION_PATH}}/config/krb5.conf
        {{/TASKCFG_ALL_SECURITY_KERBEROS_ENABLED}}
        readiness-check:
          cmd: |
            # The broker has started when it logs a specific "started" log line. An example is below:
            # [2017-06-14 22:20:55,464] INFO [KafkaServer id=1] started (kafka.server.KafkaServer)
            kafka_server_log_files={{KAFKA_VERSION_PATH}}/logs/server.log*

            echo "Checking for started log line in $kafka_server_log_files."
            grep -q "INFO \[KafkaServer id=$POD_INSTANCE_INDEX\] started (kafka.server.KafkaServer)" $kafka_server_log_files
            if [ $? -eq 0 ] ; then
              echo "Found started log line."
            else
              echo "started log line not found. Exiting."
              exit 1
            fi
            echo "Required log line found. Broker is ready."
            exit 0
          interval: {{READINESS_CHECK_INTERVAL}}
          delay: {{READINESS_CHECK_DELAY}}
          timeout: {{READINESS_CHECK_TIMEOUT}}
        {{#TASKCFG_ALL_SECURITY_TRANSPORT_ENCRYPTION_ENABLED}}
        transport-encryption:
          - name: broker
            type: KEYSTORE
        {{/TASKCFG_ALL_SECURITY_TRANSPORT_ENCRYPTION_ENABLED}}
        kill-grace-period: {{BROKER_KILL_GRACE_PERIOD}}
plans:
  deploy:
    strategy: serial
    phases:
      broker:
        strategy: {{DEPLOY_STRATEGY}}
        pod: kafka
